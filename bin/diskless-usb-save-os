#!/bin/bash

#
# WHAT: Linux OS to USB-key backup script
# AUTHOR: Brane F. Gracnar
#

#######################################################
#         diskless-usb-save-os configuration          #
#######################################################

# Directory to backup. Normally you want
# to backup entire root directory...
#
# Type: string
# Default: "/"
ROOT_DIR="/"

# USB key mount directory
# 
# NOTE: If it does not exist, it is
# going to be created
#
# Type: string
# Default: "/mnt/usbkey"
MNT_DIR="/mnt/usbkey"

# Run filesystem check before mounting
# filesystem?
#
# Type: boolean
# Default: 0
FSCK=0

# USB key device name
#
# Type: string
# Default: ""
USBKEY_DEV=""

########## OPERATION SYSTEM ARCHIVE CONFIGURATION ##########

# OS archive directory on USB key mountpoint
# 
# Type: string
# Default: /os-images
ARCHIVE_DIR="/os-images"

# File containing tar(1) exclude patterns
#
# Type: string
# Default: ""
ARCHIVE_EXCLUDE_FILE=""

# Created OS archive name
#
# Type: string
# Default: "os"
ARCHIVE_NAME="os"

# Prepend system hostname to the
# archive name?
#
# Type: boolean
# Default: 1
ARCHIVE_PREPEND_HOSTNAME=1

# Maximum number of OS archive files
# to maintain on USB key; oldest files will
# be removed. Set this to 0 to disable old archive
# removal
#
# Type: integer
# Default: 8
ARCHIVE_MAX_NUM="8"

# Space separated list of rsync(1) destination URLs
# where newly created OS archive is going to be copied.
#
# Type: string
# Default: ""
ARCHIVE_BACKUP_LOC=""
 
############################################################

##########   SYSLINUX BOOTLOADER CONFIGURATION    ##########

# Syslinux configuration path on USB key
#
# Type: string
# Default: "/syslinux.cfg"
SYSLINUX_CONFIG="/syslinux.cfg"

# Path to syslinux.cfg template file
#
# NOTE: Run diskless-usb-create-syslinux-config --help
#       for instructions.
#
# Type: string
# Default: "/etc/linux-diskless/syslinux.cfg.template"
SYSLINUX_TEMPLATE_CONFIG="/etc/linux-diskless/syslinux.cfg.template"

# Path to syslinux LABEL section template file
#
# NOTE: Run diskless-usb-create-syslinux-config --help
#       for instructions.
#
# Type: string
# Default: "/etc/linux-diskless/syslinux-label.template"
SYSLINUX_TEMPLATE_LABEL="/etc/linux-diskless/syslinux-label.template"

# Additional diskless-usb-create-syslinux-config command
# line options.
# 
# NOTE: Run diskless-usb-create-syslinux-config --help
#       for instructions.
#
# Type: string
# Default: ""
SYSLINUX_GENERATOR_OPT=""

############################################################

# I'm fucking sure mode (--yes command line option)
#
# When this setting is set to "yes", script
# won't ask for action confirmations anymore...
#
# It VERY RECOMMENDED to leave this setting
# at it's default
#
# Type: boolean
# Default: 0
YES="no"

# In order to "validate" this configuration file,
# comment out the following line

#######################################################
#                     FUNCTIONS                       #
#######################################################
MYNAME=$(basename "$0")
VERSION="0.17"
ARCHIVE_ID=""
REAL_ARCHIVE_NAME=""
HOSTNAME=$(hostname)
TIMESTAMP=""

# default config file
_CONFIG_DEFAULT="/etc/linux-diskless/${MYNAME}.conf"

# existing syslinux.cfg backup
_SYSLINUX_CFG_BACKUP=""

# newly generated syslinux.cfg
_SYSLINUX_CFG_NEW=""

# flags
_CANCEL=0
_MOUNT_OK=0

tty_colors_init() {
	# don't set color codes if we're not
	# connected to tty...
	test ! -t 1 -o ! -t 2 && return 0

	# SHELL color codes
	TERM_WHITE="\033[1;37m"
	TERM_YELLOW="\033[1;33m"
	TERM_LPURPLE="\033[1;35m"
	TERM_LRED="\033[1;31m"
	TERM_LCYAN="\033[1;36m"
	TERM_LGREEN="\033[1;32m"
	TERM_LBLUE="\033[1;34m"
	TERM_DGRAY="\033[1;30m"
	TERM_GRAY="\033[0;37m"
	TERM_BROWN="\033[0;33m"
	TERM_PURPLE="\033[0;35m"
	TERM_RED="\033[0;31m"
	TERM_CYAN="\033[0;36m"
	TERM_GREEN="\033[0;32m"
	TERM_BLUE="\033[0;34m"
	TERM_BLACK="\033[0;30m"
	TERM_BOLD="\033[40m\033[1;37m"
	TERM_RESET="\033[0m"
}

is_sure() {
	if [ "${SURE}" = "1" ]; then
		# msg_warn "\$SURE is set to YES, returning success."
		return 0
	fi
	
	# not connected to tty? fuck...
	if [ ! -t 1 -o ! -t 2 ]; then
		die "Not connected to TTY, \$SURE is not set and --yes command line option is not used; unable to continue."
	fi	

	local default="$1"
	local yn_str=""
	test -z "${default}" && default=1
	if [ "${default}" = "0" ]; then
		yn_str="Y/n"
	else
		yn_str="y/N"
	fi

	local r=""
	echo -ne "${TERM_YELLOW}WARNING:${TERM_RESET} Are you sure? [${yn_str}]: "
	read r

	if [ -z "${r}" ]; then
		return ${default}
	elif [ "${r}" = "y" -o "${r}" = "Y" ]; then
		return 0
	else
		return 1
	fi
}

bool_question() {
	local q="${1}"
	local default="${2}"

	# get default return value
	if [ -z "${default}" ]; then
		default="${YES}"
	fi
	bool_get "${default}"
	default=$?
	
	# --yes in effect?
	bool_get "${YES}" && return 0

	# not connected to tty? fuck, we cannot ask questions! return default value...
	test ! -t 1 -o ! -t 2 && return ${default}

	# question str
	local yn_str="[y/N]"
	if [ "${default}" = "0" ]; then
		yn_str="[Y/n]"
	fi
	local str="${q} ${yn_str}: "
	
	local i=0
	local answer=""
	while true; do
		# max 3 retries
		i=$((${i} + 1))
		test ${i} -ge 3 && return ${default}
		
		echo -ne "${str}"
		read answer
		
		# default answer?
		test -z "${answer}" && return ${default}
		
		# get boolean
		bool_get "${answer}"
		local rv=$?
		
		# invalid answer?
		test "${rv}" = "2" && continue
		
		return ${rv}
	done
}

bool_get() {
	case ${1} in
		1|[Yy]|[Yy][Ee][Ss]|[Tt]|[Tt][Rr][Uu][Ee])
			return 0
			;;
		0|[Nn]|[Nn][Oo]|[Ff][Aa][Ll][Ss][Ee])
			return 1
			;;
		*)
			return 2
			;;
	esac
}

msg_info() {
	logger -i "$MYNAME info: $@"
	echo -e "${TERM_BOLD}INFO   :${TERM_RESET} $@ ${TERM_RESET}"
}

msg_warn() {
	logger -i "$MYNAME warn: $@"
	echo -e "${TERM_YELLOW}WARNING:${TERM_RESET} $@ ${TERM_RESET}"
}

msg_err() {
	logger -i "$MYNAME error: $@"
	echo -e "${TERM_LRED}ERROR  :${TERM_RESET} $@ ${TERM_RESET}"
}

die() {
	msg_err "$@"
	do_cleanup
	exit 1
}

do_cleanup() {
	# umount mount directory...
	test "${_MOUNT_OK}" = "1" && fs_umount "${MNT_DIR}"
	
	# old syslinux config?
	if [ ! -z "${_SYSLINUX_CFG_BACKUP}" -a -f "${_SYSLINUX_CFG_BACKUP}" ]; then
		rm -f "${_SYSLINUX_CFG_BACKUP}" >/dev/null 2>&1
	fi

	# new syslinux config?
	if [ ! -z "${_SYSLINUX_CFG_NEW}" -a -f "${_SYSLINUX_CFG_NEW}" ]; then
		rm -f "${_SYSLINUX_CFG_NEW}" >/dev/null 2>&1
	fi

	return 0
}

printhelp() {
	cat <<EOF
Usage$: ${MYNAME} [OPTIONS]

This script creates FULL operating system backup as
gzipped tar archive and updates syslinux bootloader
configuration.

OPTIONS:

  -c  --config=FILE        Loads specified configuration file.
                           (Default: "${_CONFIG_DEFAULT}")
  -d  --default-config     Prints default configuration file
  
  -Y  --yes                Answer yes to all questions (Default: ${YES})

  -V  --version            Prints script version
  -h  --help               This help message
EOF
}

config_load() {
	if [ ! -f "${1}" ]; then
		Error="Configuration file '${1}' does not exist."
		return 1
	elif ! source "${1}"; then
		Error="Error parsing configuration file '${1}'."
		return 1
	fi

	return 0
}

config_default_print() {
	cat $0 | head -n 137 | tail -n 130 | sed -re 's/^([A-Z]+.*)/# \1/g'
	echo "ive_been_lazy_and_ihavent_edited_default_config_file"
	echo ""
	echo "# EOF"
}

archive_cleanup() {
	# is this feature disabled?
	test "${ARCHIVE_MAX_NUM}" = "0" && return 0

	echo ""
	echo -e "${TERM_DGRAY}#######################################################${TERM_RESET}"
	echo -e "${TERM_DGRAY}#       CLEANING UP USB KEY ARCHIVE DIRECTORY         #${TERM_RESET}"
	echo -e "${TERM_DGRAY}#######################################################${TERM_RESET}"
	echo ""

	local dir=$(sanitize_path "${1}")
	local prefix="${2}"

	local files=""
	local n_files=0
	local can_rm=""
	local can_un=""
	echo ""
	msg_info "Cleaning up archive directory '${dir}'."
	echo ""
	(
		cd "${dir}" || die "Unable to enter directory '${dir}'"
		
		files=$(ls *${prefix}* 2>/dev/null | grep -v '\.md5$')
		
		# if no files were found, we have nothing
		# clean up
		test -z "${files}" && return 0
		
		# check how many files
		n_files=$(echo "${files}" | wc -l)
		local n_rem=$((n_files - ${ARCHIVE_MAX_NUM}))
		
		# is there is to few archives for cleanup?
		test ${n_files} -lt ${ARCHIVE_MAX_NUM} && return 0

		local f=""
		local i=0
		for f in ${files}; do
			i=$((i + 1))
			if [ $i -le ${n_rem} ]; then
				can_rm="${can_rm} $f"
			else
				can_un="${can_un} $f"
			fi
		done
		
		test -z "${can_rm}" && return 0

		local x=""
		msg_warn "Found ${TERM_LRED}${n_files}${TERM_RESET} archives in ${dir}."
		msg_warn "Maximum number of archive files is set to ${TERM_LRED}${ARCHIVE_MAX_NUM}${TERM_RESET}."
		echo ""

		msg_info "The following archives will be ${TERM_BOLD}LEFT INTACT:${TERM_RESET}"
		for x in ${can_un}; do
			echo "        $x"
		done
		echo ""

		msg_warn "The following archives are going to be ${TERM_BOLD}REMOVED:${TERM_RESET}"
		for x in ${can_rm}; do
			echo -e "        ${TERM_LRED}$x${TERM_RESET}"
		done
		echo ""

		# remove files
		for f in ${can_rm}; do
			bool_question "Remove archive '${TERM_LRED}${f}${TERM_RESET}'?" && rm -vf ${f}{,.md5}
		done
		echo ""
	)

	return 0;
}

check_mntdir() {
	if [ ! -e "${1}" -o ! -d "${1}" ]; then
		rm -f "${1}" >/dev/null 2>&1
		mkdir -p "${1}" || die "Unable to create non-existing mount directory '${1}'."
	fi
	return 0
}

fs_mount() {
	local dev="${1}"
	local dir="${2}"
	
	# fs check before mounting?
	local do_fsck="${3}"
	test -z "${do_fsck}" && do_fsck="${FSCK}"
	
	test -z "${dev}" && die "Unable to mount unspecified device to '${dir}'"
	test ! -e "${dev}" && die "Unable to mount nonexisting device '${dev}' to '${dir}'."

	if [ "${do_fsck}" = "1" ]; then
		msg_info "Running filesystem check on device '${TERM_LRED}${dev}${TERM_RESET}'."
		echo ""
		fsck "${dev}"
		echo ""
	fi

	# mount the goddamn device
	check_mntdir "${dir}"
	mount -o rw,noatime "${dev}" "${dir}" || die "Unable to mount '${dev}' to '${dir}'."

	return 0
}

fs_umount() {
	local dir="${1}"
	
	# is this dir mounted?
	fs_mounted "${dir}" || return 0
	
	msg_info "Unmounting: ${TERM_BOLD}${dir}${TERM_RESET}"
	sync
	umount "${dir}" || die "Unable to unmount: ${dir}"
	return 0
}

fs_mounted() {
	local dir="${1}"	
	test -d "${dir}" || return 1
	grep -q " ${dir} " /proc/mounts > /dev/null 2>&1
}

sanitize_path() {
	readlink -f "${1}" 2>/dev/null
}

archive_backup_remote() {
	local ts="${1}"
	
	# disabled?
	test -z "${ARCHIVE_BACKUP_LOC}" && return 0

	echo ""
	echo -e "${TERM_DGRAY}#######################################################${TERM_RESET}"
	echo -e "${TERM_DGRAY}#      BACKING UP OS ARCHIVE TO REMOTE LOCATIONS      #${TERM_RESET}"
	echo -e "${TERM_DGRAY}#######################################################${TERM_RESET}"
	echo ""
	
	# archive files
	local files=$(sanitize_path "${MNT_DIR}/${ARCHIVE_DIR}")
	files="${files}/*.${ts}*"
	
	# sylinux.cfg backup?
	test -f "${_SYSLINUX_CFG_BACKUP}" && files="${files} ${_SYSLINUX_CFG_BACKUP}"

	# new syslinux.cfg?
	test -f "${_SYSLINUX_CFG_NEW}" && files="${files} ${_SYSLINUX_CFG_NEW}"

	# send to all backup destinations
	local loc=""
	for loc in ${ARCHIVE_BACKUP_LOC}; do
		test -z "${loc}" && continue
		
		msg_info "Copying OS archive to '${TERM_LGREEN}${loc}/${TIMESTAMP}${TERM_RESET}'"
		rsync --no-perms --no-owner --no-group -v ${syslinux_cfg} ${files} "${loc}"
		echo ""
	done

	return 0
}

archive_create() {
	echo ""
	echo -e "${TERM_DGRAY}#######################################################${TERM_RESET}"
	echo -e "${TERM_DGRAY}#       CREATING OPERATING SYSTEM FULL BACKUP         #${TERM_RESET}"
	echo -e "${TERM_DGRAY}#######################################################${TERM_RESET}"
	echo ""

	test -z "${USBKEY_DEV}" && die "Archive device is not defined."
	test ! -d "${ROOT_DIR}" && die "Directory '${ROOT_DIR}' is invalid."

	# compute variables
	ARCHIVE_ID="${TIMESTAMP}"
	REAL_ARCHIVE_NAME="${ARCHIVE_NAME}.${ARCHIVE_ID}.tgz"

	# optionally prepend hostname to real archive name
	test "${ARCHIVE_PREPEND_HOSTNAME}" = "1" && REAL_ARCHIVE_NAME="${HOSTNAME}.${REAL_ARCHIVE_NAME}"
	local f=$(sanitize_path "${MNT_DIR}/${ARCHIVE_DIR}/${REAL_ARCHIVE_NAME}")
	#local f="${MNT_DIR}/${ARCHIVE_DIR}/${REAL_ARCHIVE_NAME}"

	if [ ! -e "${MNT_DIR}/${ARCHIVE_DIR}" -o ! -d "${MNT_DIR}/${ARCHIVE_DIR}" ]; then
		msg_warn "Creating missing archive directory '${TERM_YELLOW}${MNT_DIR}/${ARCHIVE_DIR}${TERM_RESET}'."
		rm -f "${MNT_DIR}/${ARCHIVE_DIR}" >/dev/null 2>&1
		mkdir -p "${MNT_DIR}/${ARCHIVE_DIR}" || die "Unable to create directory '${MNT_DIR}/${ARCHIVE_DIR}'."
	fi

	# run archiver
	msg_info "Creating OS package tarball '${TERM_LGREEN}${f}${TERM_RESET}'."
	
	local tar_opt=""
	test -f "${ARCHIVE_EXCLUDE_FILE}" && tar_opt="-X ${ARCHIVE_EXCLUDE_FILE}"

	# now, really create archive...	
	tar --one-file-system ${tar_opt} -czpf "${f}" "${ROOT_DIR}" /dev/console /dev/null 2>&1 || die "Unable to create OS package tarball."
	echo ""

	# create md5 checksum
	local md5=$(md5sum "${f}" | awk '{print $1}')
	msg_info "MD5 digest of ${REAL_ARCHIVE_NAME} is '${TERM_YELLOW}${md5}${TERM_RESET}'."
	msg_info "Writing MD5 digest to '${f}.md5'"
	echo "${md5}" > "${f}.md5"

	# this is it...
	return 0
}

bootloader_update() {
	echo ""
	echo -e "${TERM_DGRAY}#######################################################${TERM_RESET}"
	echo -e "${TERM_DGRAY}#     UPDATING SYSLINUX BOOTLOADER CONFIGURATION      #${TERM_RESET}"
	echo -e "${TERM_DGRAY}#######################################################${TERM_RESET}"
	echo ""

	local syslinux_cfg=$(sanitize_path "${MNT_DIR}/${SYSLINUX_CONFIG}")
	
	_SYSLINUX_CFG_NEW="/tmp/syslinux.cfg.${TIMESTAMP}.new"
	
	# create existing configuration backup
	_SYSLINUX_CFG_BACKUP=""
	if [ -f "${syslinux_cfg}" -a -r "${syslinux_cfg}" ]; then
		 _SYSLINUX_CFG_BACKUP="/tmp/syslinux.cfg.${TIMESTAMP}.backup"
		 cp -f "${syslinux_cfg}" "${_SYSLINUX_CFG_BACKUP}" || die "Unable to backup existing syslinux.cfg configuration."
	else
		msg_warn "Syslinux configuration not found: ${syslinux_cfg}"
		rm -f "${syslinux_cfg}" >/dev/null 2>&1
	fi
	
	# compute generator opt
	local opt=""
	
	# syslinux.cfg.template?
	test ! -z "${SYSLINUX_TEMPLATE_CONFIG}" && opt="${opt} -t ${SYSLINUX_TEMPLATE_CONFIG}"
	
	# syslinux-label.template?
	test ! -z "${SYSLINUX_TEMPLATE_LABEL}" && opt="${opt} -l ${SYSLINUX_TEMPLATE_LABEL}"
	
	# additional generator options?
	test ! -z "${SYSLINUX_GENERATOR_OPT}" && opt="${opt} ${SYSLINUX_GENERATOR_OPT}"
 
	# run syslinux.cfg generator script
	diskless-usb-create-syslinux-config ${opt} -o "${_SYSLINUX_CFG_NEW}" || die "Error creating syslinux configuration."
	
	# show diff
	if [ ! -z "${_SYSLINUX_CFG_BACKUP}" ]; then
		if ! bool_get "${YES}" && bool_question "Show diff between old and new ${SYSLINUX_CONFIG}?" n; then
			diff -u "${_SYSLINUX_CFG_BACKUP}" "${_SYSLINUX_CFG_NEW}"
			echo ""
		fi
	fi
	
	# install syslinux.cfg
	bool_question "Install new version of syslinux configuration?" "n" || die "Aborted by user."
	msg_info "Installing new syslinux configuration: ${syslinux_cfg_tmp} => ${syslinux_cfg}."
	cp -f "${_SYSLINUX_CFG_NEW}" "${syslinux_cfg}" || die "Unable to install syslinux configuration file."
	
	msg_info "Syslinux bootloader configuration updated."
	echo "" 

	return 0
}

trap_cancel() {
	_CANCEL=$((${_CANCEL} + 1))
	if [ ${_CANCEL} -lt 3 ]; then
		local left=$((3 - ${_CANCEL}))
		msg_warn "Got INT/TERM signal; send send signal ${left} more time(s) to really cancel script execution."
		return 0
	fi
	die "Script execution cancelled by SIG INT/TERM."  	
}

run_it() {
	test -z "${MNT_DIR}" && die "Mount directory is not specified."
	
	# compute timestamp
	TIMESTAMP=$(date +'%Y%m%d-%H%M%S')
	msg_info "Creating Linux OS archive id ${TERM_BOLD}${TIMESTAMP}${TERM_RESET}"
	echo ""
	
	# mount fs
	if ! bool_question "Mount USB key device '${TERM_LRED}${USBKEY_DEV}${TERM_RESET}' to '${TERM_YELLOW}${MNT_DIR}${TERM_RESET}'?" n; then
		die "You don't seem to be sure if you want to mount archive device ${USBKEY_DEV} to ${MNT_DIR}."
	fi
	msg_info "Mounting archive storage device '${TERM_LRED}${USBKEY_DEV}${TERM_RESET}' to '${TERM_YELLOW}${MNT_DIR}${TERM_RESET}'."
	fs_mount "${USBKEY_DEV}" "${MNT_DIR}" || die
	_MOUNT_OK=1
	
	# perform archive directory cleanup 
	archive_cleanup "${MNT_DIR}/${ARCHIVE_DIR}" "${ARCHIVE_NAME}"

	# create OS backup
	archive_create
	
	# update boot loader configuration
	bootloader_update
	
	# send stuff to remote locations...
	archive_backup_remote "${TIMESTAMP}"

	# cleanup the mess
	do_cleanup
}

ive_been_lazy_and_ihavent_edited_default_config_file() {
	echo ""
	echo -e "${TERM_BOLD}     HA, HA, HA ${TERM_LRED}*** BUSTED ***${TERM_RESET} ${TERM_BOLD}HA, HA, HA,${TERM_RESET}"
	echo ""
	echo "You didn't edit default configuration file, did you? ;)"
	echo ""
	exit 1
}

#######################################################
#                        MAIN                         #
#######################################################

# PATH
PATH=${PATH}:/sbin:/usr/sbin:/usr/local/sbin:$(dirname "$0"):.

# initialize shell colors
tty_colors_init

# try to load default config file
config_load "${_CONFIG_DEFAULT}"
Error=""

TEMP=$(getopt -o c:dYVh --long config:,default-config,yes,version,help -n "$MYNAME" -- "$@")
test "$?" != "0" && die "Command line parsing error."
eval set -- "$TEMP"
while true; do
	case $1 in
		-c|--config)
			config_load "${2}" || die "Unable to load config file: $Error"
			shift 2
			;;
		-d|--default-config)
			config_default_print
			exit 0
			;;
		-Y|--yes)
			SURE=1
			YES="yes"
			shift
			;;
		-V|--version)
			echo "$MYNAME $VERSION"
			exit 0
			;;
		-h|--help)
			printhelp
			exit 0
			;;
		--)
			shift
			break
			;;
		*)
			echo "Invalid command line. Run $MYNAME --help for instructions" 1>&2
			exit 1
			;;
	esac
done

# install signal handlers (traps)
trap trap_cancel SIGINT SIGTERM

# run the devil...
msg_info "Starting ${TERM_LRED}$MYNAME${TERM_RESET} version ${TERM_YELLOW}$VERSION${TERM_RESET} [pid: $$]."
run_it

exit 0

# EOF
